ContractTable.jsx ->   

import React from "react";
import { Link } from "react-router-dom";
import { MDBDataTable } from "mdbreact";

function ContractTable(props) {
  let contractData = props.contractData.map((c, index) => c);
  let rowData = contractData.map((data, index) => Object.fromEntries(data));
  rowData = rowData.map((c, index) => ({
    ...c,
    viewTrips: (
      <Link onClick={(e) => props.setSelectedContract(contractData[index][16][1])} to="/contracts/trips" className="btn btn-primary btn-sm">
        View Trips
      </Link>
    ),
  }));

  let columnData = contractData[0].filter(labelFilter).map((c, index) => ({ label: c[0], field: c[0], sort: "asc" }));
  columnData = [...columnData, { label: "View Trips", field: "viewTrips" }];

  function labelFilter(tableData) {
    return tableData[0] !== "DONOTSHOW";
  }
  const data = {
    columns: columnData,
    rows: rowData,
  };
  return <MDBDataTable striped bordered hover responsive data={data} />;
}

export default ContractTable;




!!!!!!!!!!!!!!!!!!!!!!!!!!!!! THIS IS THE REVISED APP.jS !!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!! THIS IS THE REVISED APP.jS !!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!! THIS IS THE REVISED APP.jS !!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!! THIS IS THE REVISED APP.jS !!!!!!!!!!!!!!!!!!!!!!!!!


import React, { Component, useState, useEffect } from "react";
import Routes from "./Routes";
import NavBar from "./components/layout/NavBar";
import SideBar from "./components/layout/SideBar";
import Footer from "./components/layout/Footer";
import Send from "./components/send";

function App(props) {
  const [isAuthenticated, userHasAuthenticated] = useState(false);
  const [isAuthenticating, setIsAuthenticating] = useState(true);
  const [contractAccess, setContractAccess] = useState("None");

  useEffect(() => {
    if (isAuthenticated) {
      Send.get("/Loggedin", { handleLogout, handleLogin })
        .then(res => {
          console.log("Logged in Successfuly");
        }, userHasAuthenticated(true))
        .catch(err => {
          props.history.push("/");
          console.log(err);
          console.log("Logging Out");
        });
      console.log("Logging In");
      setIsAuthenticating(false);
    } else {
      userHasAuthenticated(false);
      setIsAuthenticating(false);
      console.log("Please Login");
    }
  }, [isAuthenticated, props.history]);

  function handleLogin(sess) {
    if (sess.match === "true") {
      sessionStorage.setItem("SessionID", sess.SessionID);
      sessionStorage.setItem("IDSession", sess.IDSession);
      sess.NavPermissions.map(a => {
        return sessionStorage.setItem(a[0], a[1]);
      });
      userHasAuthenticated(true);
      setContractAccess(sessionStorage.getItem("Contracts"));
    }
  }

  function handleLogout() {
    userHasAuthenticated(false);
    setContractAccess("None");
    sessionStorage.clear();
    //props.history.push("/login");
  }

  class Content extends Component {
    render() {
      return (
        <React.Fragment>
          <NavBar
            handleLogout={handleLogout}
            handleLogin={handleLogin}
            isAuthenticated={isAuthenticated}
            userHasAuthenticated={userHasAuthenticated}
            contractAccess={contractAccess}
            isAuthenticating={isAuthenticating}
            setContractAccess={setContractAccess}
          />
          <SideBar
            contractAccess={contractAccess}
            isAuthenticated={isAuthenticated}
          />
          <main
            id="content"
            className="p-5"
            style={{ minHeight: "calc(100vh - 102px)" }}
          >
            <Routes
              handleLogout={handleLogout}
              handleLogin={handleLogin}
              isAuthenticated={isAuthenticated}
              userHasAuthenticated={userHasAuthenticated}
              contractAccess={contractAccess}
            />
          </main>
          <Footer />
        </React.Fragment>
      );
    }
  }
  return <Content />;
}
export default App;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!! THIS IS THE REVISED APP.jS !!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!! THIS IS THE REVISED APP.jS !!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!! THIS IS THE OLD APP.jS !!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!! THIS IS THE OLD APP.jS !!!!!!!!!!!!!!!!!!!!!!!!!







import React, { Component, useState, useEffect } from "react";
import Routes from "./Routes";
import NavBar from "./components/layout/NavBar";
import SideBar from "./components/layout/SideBar";
import Footer from "./components/layout/Footer";
import Send from "./components/send";

function App(props) {
  const [isAuthenticated, userHasAuthenticated] = useState(false);
  const [isAuthenticating, setIsAuthenticating] = useState(true);
  const [contractAccess, setContractAccess] = useState("None");

  useEffect(() => {
    onLoad();
  }, []);

  async function onLoad() {
    Send.get("/Loggedin", { handleLogout, handleLogin })
      .then(res => {
        console.log("logging in");
      })
      .catch(err => {
        console.log(err);
        console.log("Logging Out");
      });

    setIsAuthenticating(false);
  }

  function handleLogin(sess) {
    if (sess.match === "true") {
      sessionStorage.setItem("SessionID", sess.SessionID);
      sessionStorage.setItem("IDSession", sess.IDSession);
      sess.NavPermissions.map(a => {
        sessionStorage.setItem(a[0], a[1]);
      });
      userHasAuthenticated(true);
      setContractAccess(sessionStorage.getItem("Contracts"));
    }
  }

  function handleLogout() {
    userHasAuthenticated(false);
    setContractAccess("None");
    sessionStorage.clear();
    //props.history.push("/login");
  }

  class Content extends Component {
    render() {
      return (
        <React.Fragment>
          <NavBar
            handleLogout={handleLogout}
            handleLogin={handleLogin}
            isAuthenticated={isAuthenticated}
            userHasAuthenticated={userHasAuthenticated}
            contractAccess={contractAccess}
            isAuthenticating={isAuthenticating}
          />
          <SideBar
            handleLogout={handleLogout}
            handleLogin={handleLogin}
            isAuthenticated={isAuthenticated}
            userHasAuthenticated={userHasAuthenticated}
            contractAccess={contractAccess}
            isAuthenticating={isAuthenticating}
          />
          <main
            id="content"
            className="p-5"
            style={{ minHeight: "calc(100vh - 102px)" }}
          >
            <Routes
              handleLogout={handleLogout}
              handleLogin={handleLogin}
              isAuthenticated={isAuthenticated}
              userHasAuthenticated={userHasAuthenticated}
              contractAccess={contractAccess}
            />
          </main>
          <Footer />
        </React.Fragment>
      );
    }
  }
  return <Content />;
}
export default App;
